/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package swingGUI;

import common.ServiceFailureException;
import hotelmanager.Room;
import hotelmanager.RoomManagerImpl;
import hotelmanager.RoomType;
import hotelmanager.Parser;
import java.io.IOException;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;

public class AddRoom extends javax.swing.JFrame {

    private ResourceBundle general = HotelManagerFrame.LANGUAGE;
    private String roomType;
    private String roomCapacity;
    private Long updateRoomId;
    private Room originalRoom;
    
    /**
     * Creates new form AddRoom
     */
    public AddRoom() {
	initComponents();
	updateRoomId = null;
    }
    
    public AddRoom(String updateRoom) {
	initComponents();
	setUpdatedRoom(updateRoom);
	addRoomButton.setText(general.getString("updateRoom"));
    }
    
    private void setUpdatedRoom(String stringRoom)
    {
	Parser parser = new Parser();
	try {
	    originalRoom = parser.parseStringToRoom(stringRoom);
	} catch (IOException e) {
	    Logger.getLogger(this.getName()).log(Level.SEVERE, null, e);
            new SetErrorMessage("<html>"+general.getString("errFromatRoom")+"</html>");
	}
	
	capacity.setText(new Integer(originalRoom.getCapacity()).toString());
	roomTypeSelect.setSelectedItem(originalRoom.getType());
	updateRoomId = originalRoom.getId();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        capacity = new javax.swing.JTextField();
        addRoomButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        roomTypeSelect = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        capacity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                capacityActionPerformed(evt);
            }
        });

        addRoomButton.setText(general.getString("addRoom"));
        addRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomButtonActionPerformed(evt);
            }
        });

        jLabel1.setText(general.getString("roomType"));

        jLabel2.setText(general.getString("capacity"));

        jButton2.setText(general.getString("cancel"));
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        roomTypeSelect.setModel(new javax.swing.DefaultComboBoxModel(hotelmanager.RoomType.values()));
        roomTypeSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomTypeSelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1)
                            .addComponent(capacity, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                            .addComponent(jLabel2)
                            .addComponent(roomTypeSelect, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addRoomButton)))
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addGap(11, 11, 11)
                .addComponent(roomTypeSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(capacity, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addRoomButton)
                    .addComponent(jButton2))
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
	this.setVisible(false);
    }//GEN-LAST:event_jButton2MouseClicked

    private void roomTypeSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomTypeSelectActionPerformed
	roomType = roomTypeSelect.getSelectedItem().toString();
    }//GEN-LAST:event_roomTypeSelectActionPerformed

    private void capacityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_capacityActionPerformed
	roomCapacity = capacity.getText();
    }//GEN-LAST:event_capacityActionPerformed

    private void addRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoomButtonActionPerformed
	roomTypeSelectActionPerformed(evt);
        capacityActionPerformed(evt);
        new SwingWorker<Void, Void>() {
            Room tmpRoom = new Room();
            @Override
            protected Void doInBackground(){
                
                if (roomType == null || roomType.isEmpty()) {
		    new SetErrorMessage("<html>"+general.getString("errRoomType")+"</html>");
		    return null;
                }
		else if (roomCapacity == null || roomCapacity.isEmpty())
		{
		    new SetErrorMessage("<html>"+general.getString("errRoomCapacity")+"</html>");
		    return null;
		}
                try {
		    Parser roomTypeParser = new Parser();
		    
                    tmpRoom.setCapacity(Integer.parseInt(roomCapacity));
                    tmpRoom.setType(roomTypeParser.stringToType(roomType.toString()));

		    if(updateRoomId != null)
		    {
			tmpRoom.setId(updateRoomId);
			try{
			    validateRoomCapacity(tmpRoom);
			    HotelManagerFrame.getRoomManager().updateRoom(tmpRoom);
			    HotelManagerFrame.getRoomListModel().removeRoom(originalRoom);
			    HotelManagerFrame.getRoomUpdateRemoveListModel().removeRoom(originalRoom);
			    Logger.getLogger(AddRoom.this.getName()).log(Level.INFO, "Successfuly updated person.");
			}catch(ServiceFailureException | IllegalArgumentException e)
			{
			    tmpRoom.setId(null);
			    Logger.getLogger(AddRoom.this.getName()).log(Level.SEVERE, null, e);
			    new SetErrorMessage("<html>"+general.getString("errRoomUpdateCapacity")+"</html>");
			}
		    } else{
			HotelManagerFrame.getRoomManager().createRoom(tmpRoom);
			Logger.getLogger(AddRoom.this.getName()).log(Level.INFO, "Successfuly created room.");
		    }
		    AddRoom.this.setVisible(false);
		    
                    return null;
		    
                } catch (NumberFormatException e) {
                    Logger.getLogger(AddRoom.this.getName()).log(Level.SEVERE, null, e);
                    new SetErrorMessage("<html>"+general.getString("errRoomAdd")+"</html>");
                }
                return null;
            }

            @Override
            protected void done() {
                if(tmpRoom.getId() != null){
		    HotelManagerFrame.getRoomListModel().addRoom(tmpRoom);
		    HotelManagerFrame.getRoomUpdateRemoveListModel().addRoom(tmpRoom);
                }
            }
        }.execute();
    }//GEN-LAST:event_addRoomButtonActionPerformed

    private void validateRoomCapacity(Room newRoom) throws ServiceFailureException, IllegalArgumentException
    {
	try{
	    Room oldRoom = HotelManagerFrame.getRoomManager().getRoom(newRoom.getId());
	    int personsInRoom = HotelManagerFrame.getHotelManager().findPersonsInRoom(oldRoom).size();
	    if(personsInRoom > newRoom.getCapacity())
		throw new IllegalArgumentException("Cant update room because of capacity");
	}catch(ServiceFailureException e)
	{
	    throw new ServiceFailureException("Room does not exists");
	}
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
	/*
	 * Set the Nimbus look and feel
	 */
	//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
	 * If Nimbus (introduced in Java SE 6) is not available, stay with the
	 * default look and feel. For details see
	 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
	 */
	try {
	    for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
		if ("Nimbus".equals(info.getName())) {
		    javax.swing.UIManager.setLookAndFeel(info.getClassName());
		    break;
		}
	    }
	} catch (ClassNotFoundException ex) {
	    java.util.logging.Logger.getLogger(AddRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (InstantiationException ex) {
	    java.util.logging.Logger.getLogger(AddRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (IllegalAccessException ex) {
	    java.util.logging.Logger.getLogger(AddRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (javax.swing.UnsupportedLookAndFeelException ex) {
	    java.util.logging.Logger.getLogger(AddRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	}
	//</editor-fold>

	/*
	 * Create and display the form
	 */
	java.awt.EventQueue.invokeLater(new Runnable() {

	    public void run() {
		
	    }
	});
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRoomButton;
    private javax.swing.JTextField capacity;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox roomTypeSelect;
    // End of variables declaration//GEN-END:variables
}
